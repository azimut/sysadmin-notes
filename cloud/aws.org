- https://medium.com/@maciej.pocwierz/how-an-empty-s3-bucket-can-make-your-aws-bill-explode-934a383cb8b1

- OS distributions
  - Amazon Linux 1 (AL1, AMazon Linux AMI)
  - Amazon Linux 2 (AL2)
    - https://docs.aws.amazon.com/linux/al2/ug/what-is-amazon-linux.html
  - Amazon Linux 2023
    - Fedora based
    - https://aws.amazon.com/linux/amazon-linux-2023/
    - https://github.com/amazonlinux/amazon-linux-2023

- Regions:
  eg: us-east-1

- Availability Zones:
  - aka datacenters available on a Region
  - region + letter
  eg: us-east-1a

- =AWS CloudFormation=:
  - a service running in AWS
  - uses flatfile templates to provision what services you need on AWS

* Certifications

DVA https://github.com/itsmostafa/certified-aws-developer-associate-notes
SAA https://github.com/skulltech/aws-solutions-architect-associate-notes

https://www.whizlabs.com/blog/aws-saa-c01-or-saa-c02/
The difference between SAA-C02 and SAA-C03 is that the SAA-C03 is the
new AWS Solutions Architect Associate certification exam. Since the
SAA-C02 exam was about to retire on August 29th 2022 , many candidates
might have made up their minds to sit for SAA-C03.

- Certifications https://aws.amazon.com/certification/
  - AWS Certified
    - Cloud Practicioner               (CLF)
    - Data Engineer Associate          (DEA)
    - Developer Associate              (DVA)
    - SysOps Administrator Associate   (SOA)
    - DevOps Engineer Professional     (DOP)
    - Solutions Architect Associate    (SAA)
    - Solutions Architect Professional (SAP)

* CLI

aws s3 ls
aws sts get-caller-identity

* CDK

cdk init app --language go
cdk deploy

* Course 24: Build Go Apps That Scale in AWS | meley

- Works at twitch
- source https://github.com/Melkeydev/FrontEndMasters

** Introduction

- Requirements
  - .aws/credentials
    .aws/condig
  - CDK installed
    - AWS framework
    - in Go
    - Terraform alternative

- Go
  - Design patterns
  - Common gotchas

- System Diagram / Architecture
  - Amazon API Gateway
  - An ~AWS Lambda~ runs a =Lambda Function= in an =IAM Role=
  - Amazon DynamoDB
  #+begin_src
    client -> API Gateway -> Lambda(Go) -> DynamoDB
  #+end_src

** Go

- 00:31:00 meme yt engineers
- Frontend Masters uses it, sounds like they build their streaming platform.
- uses LSP/gopls for vscode
- go applications can have multiple entry points (packages main)
  - as long as they are separated by folder

** AWS

- When dealing with complex services/architectures like Redshift clusters
  it makes more sense to use a precise IaaC tool like CDK.

- go -> CDK -> AWS CF -> infra

* Course 22: AWS Certified Devoper        | ITProTV
* Course 22: AWS for =Frontend= Engineers | FrontendMasters

- source https://github.com/stevekinney/aws-v2
  - react app

Speaker: Steve Kinney
 - works at Temporal (a CI? company)
 - work(ed) at Sendgrid

** 1 Introduction

- Goal is to deploy your own vercel/netlify mini-service
- Initially Servers were at Chicago.
  |-----------+-----+-----|
  | Denver    | 5.6 | 1.4 |
  | Germany   |  11 | 1.8 |
  | India     | 9.6 | 1.3 |
  | Australia |  12 | 0.8 |
  |-----------+-----+-----|
- With *Cloudfront* you put it everywhere.
  Once user has to "pay" the (time)cost of going to Chicago, everyone else has a cache nearby.
- Technical Details
  - S3
  - Distributed Globally
  - SSL
  - Automatically deployed (Github Actions)
  - Lambda Edge, Cloudfront Functions

** 2 Setup

- Billing preferences
  - Receive Free Tier Usage Alerts

- Budgets
  - Cost budget
  - Montly

- IAM = Identity and Access Managment

- Create a new non-root user
  - Types of access
    - Access Key (API)
    - Password
  - Add AdministratorAccess Policy

** 3 S3

- ARN = Amazon Resource Number
  - arn:aws:s3:::${BucketName}/${KeyName}

- S3 = Simple Storage Service
  - You have Buckets
  - Where you put Objects
  - a key value store
    - you can fake a directory by using a key like
      "scripts/script.js"
  - tiers ($$ -> $)
    - normal?
    - infrequently accessed
    - glaciar
  - operations (?
    - insert: immediately
    - update/remove: eventually consistent
  - create
    - bucket name
    - region
    - object ownership (disable ACL)
    - unblock public access (for now...)
  - permissions/bucket policy
    #+begin_src json
      {
        "Version": "2012-10-17",
        "Statement": [ 
        ]
      }
    #+end_src

- You can host web pages out of your buckets
  - .js, .css, images

- Route 53
  - dns
