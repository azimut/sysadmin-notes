- tool (dead) https://zackoverflow.dev/writing/ffmpeg-guide
- tool https://evanhahn.github.io/ffmpeg-buddy/
- tool: web UI
  source https://github.com/antiboredom/ffmpeg-explorer
  ui https://lav.io/notes/ffmpeg-explorer/
  filters map https://raw.githubusercontent.com/antiboredom/ffmpeg-explorer/main/filternames.txt
  discussion https://news.ycombinator.com/item?id=37269425

- library (filter_complex support) https://github.com/kkroening/ffmpeg-python
- tool/snippets https://amiaopensource.github.io/ffmprovisr/
- tool https://ffmpegbyexample.com/
- tool https://github.com/smacke/ffsubsync
- tool https://github.com/fujiawei-dev/ffmpeg-generator

- tutorial https://github.com/leandromoreira/ffmpeg-libav-tutorial
- guide https://trac.ffmpeg.org/wiki/Encode/H.264
- examples https://hhsprings.bitbucket.io/docs/programming/examples/ffmpeg/index.html

* cli
|------------------+------------------------------------|
|       <c>        |                                    |
| -filter:v fps=30 | 60 to 30 fps                       |
|      -ac 1       | mono                               |
|   -acodec copy   | copy audio                         |
| -vcodec libx264  |                                    |
|       -vn        | remove video                       |
|      -r FPS      |                                    |
|      -crf N      | Constant Rate Factor (aka quality) |
|    -pixfmt P     |                                    |
|------------------+------------------------------------|
** expressions

https://www.ffmpeg.org/ffmpeg-all.html#Expression-Evaluation

bitand(x, y)
bitor(x, y) x and y are converted to integers before executing the bitwise operation.
ld(idx) Load the value of the internal variable with index idx, which was previously stored with st(idx, expr). The function returns the loaded value.
print(exp)
print(exp, level)
random(idx)

    Return a pseudo random value between 0.0 and 1.0. idx is the index of the internal variable used to save the seed/state, which can be previously stored with st(idx).

    To initialize the seed, you need to store the seed value as a 64-bit unsigned integer in the internal variable with index idx.

    For example, to store the seed with value 42 in the internal variable with index 0 and print a few random values:

    st(0,42); print(random(0)); print(random(0)); print(random(0))

randomi(idx, min, max)

    Return a pseudo random value in the interval between min and max. idx is the index of the internal variable which will be used to save the seed/state, which can be previously stored with st(idx).

    To initialize the seed, you need to store the seed value as a 64-bit unsigned integer in the internal variable with index idx.
root(expr, max)

    Find an input value for which the function represented by expr with argument ld(0) is 0 in the interval 0..max.

    The expression in expr must denote a continuous function or the result is undefined.

    ld(0) is used to represent the function input value, which means that the given expression will be evaluated multiple times with various input values that the expression can access through ld(0). When the expression evaluates to 0 then the corresponding input value will be returned.
st(idx, expr)

    Store the value of the expression expr in an internal variable. idx specifies the index of the variable where to store the value, and it is a value ranging from 0 to 9. The function returns the value stored in the internal variable.

    The stored value can be retrieved with ld(var).

    Note: variables are currently not shared between expressions.
taylor(expr, x)
taylor(expr, x, idx)

    Evaluate a Taylor series at x, given an expression representing the ld(idx)-th derivative of a function at 0.

    When the series does not converge the result is undefined.

    ld(idx) is used to represent the derivative order in expr, which means that the given expression will be evaluated multiple times with various input values that the expression can access through ld(idx). If idx is not specified then 0 is assumed.

    Note, when you have the derivatives at y instead of 0, taylor(expr, x-y) can be used.
time(0) Return the current (wallclock) time in seconds.

*** boolean
between(x, min, max) Return 1 if x is greater than or equal to min and lesser than or equal to max, 0 otherwise.
eq(x, y) Return 1 if x and y are equivalent, 0 otherwise.
gt(x, y) Return 1 if x is greater than y, 0 otherwise.
gte(x, y) Return 1 if x is greater than or equal to y, 0 otherwise.
lt(x, y) Return 1 if x is lesser than y, 0 otherwise.
lte(x, y) Return 1 if x is lesser than or equal to y, 0 otherwise.
not(expr) Return 1.0 if expr is zero, 0.0 otherwise.
isinf(x) Return 1.0 if x is +/-INFINITY, 0.0 otherwise.
isnan(x) Return 1.0 if x is NAN, 0.0 otherwise.
*** control flow
if(x, y) Evaluate x, and if the result is non-zero return the result of the evaluation of y, return 0 otherwise.
if(x, y, z) Evaluate x, and if the result is non-zero return the evaluation result of y, otherwise the evaluation result of z.
ifnot(x, y) Evaluate x, and if the result is zero return the result of the evaluation of y, return 0 otherwise.
ifnot(x, y, z) Evaluate x, and if the result is zero return the evaluation result of y, otherwise the evaluation result of z.
while(cond, expr) Evaluate expression expr while the expression cond is non-zero, and returns the value of the last expr evaluation, or NAN if cond was always false. 
*** math trigonometry
acos(x) Compute arccosine of x.
asin(x) Compute arcsine of x.
atan(x) Compute arctangent of x.
atan2(y, x) Compute principal value of the arc tangent of y/x.
cos(x) Compute cosine of x.
cosh(x) Compute hyperbolic cosine of x.
sin(x) Compute sine of x.
sinh(x) Compute hyperbolic sine of x.
tan(x) Compute tangent of x.
tanh(x) Compute hyperbolic tangent of x.
*** rounding
 ceil(expr) Round the value of expression expr upwards to the nearest integer. For example, "ceil(1.5)" is "2.0".
round(expr) Round the value of expression expr to the nearest integer. For example, "round(1.5)" is "2.0".
floor(expr) Round the value of expression expr downwards to the nearest integer. For example, "floor(-1.5)" is "-2.0".
trunc(expr) Round the value of expression expr towards zero to the nearest integer. For example, "trunc(-1.5)" is "-1.0".

*** math / numbers

abs(x)  Compute absolute value of x.
clip(x, min, max) Return the value of x clipped between min and max.
exp(x) Compute exponential of x (with base e, the Eulerâ€™s number).
gauss(x) Compute Gauss function of x, corresponding to exp(-x*x/2) / sqrt(2*PI).
gcd(x, y) Return the greatest common divisor of x and y. If both x and y are 0 or either or both are less than zero then behavior is undefined.
hypot(x, y) This function is similar to the C function with the same name; it returns "sqrt(x*x + y*y)", the length of the hypotenuse of a right triangle with sides of length x and y, or the distance of the point (x, y) from the origin.
lerp(x, y, z) Return linear interpolation between x and y by amount of z.
log(x) Compute natural logarithm of x.
max(x, y) Return the maximum between x and y.
min(x, y) Return the minimum between x and y.
mod(x, y) Compute the remainder of division of x by y.
pow(x, y) Compute the power of x elevated y, it is equivalent to "(x)^(y)".
sgn(x) Compute sign of x.
squish(x) Compute expression 1/(1 + exp(4*x)).
sqrt(expr) Compute the square root of expr. This is equivalent to "(expr)^.5".

** encoders (-vcodec -codec:v)

#+begin_src sh
  $ ffmpeg -encoders
  Encoders:
   V..... = Video
   A..... = Audio
   S..... = Subtitle
   .F.... = Frame-level multithreading
   ..S... = Slice-level multithreading
   ...X.. = Codec is experimental
   ....B. = Supports draw_horiz_band
   .....D = Supports direct rendering method 1
#+end_src

** filters (-vf -filter:v -filter_script)

https://ffmpeg.org/ffmpeg-filters.html

#+begin_src sh
  $ ffmpeg -h filter=<FILTER> # show help for FILTER
  $ ffmpeg -filters
  Filters:
    T.. = Timeline support
    .S. = Slice threading
    ..C = Command support
    A = Audio input/output
    V = Video input/output
    N = Dynamic number and/or type of input/output
    | = Source or sink filter
#+end_src

- timeline support is given through the ~enable~ parameter which accepts ~between(t,N,M)~ joined by ~+~
- variables https://www.ffmpeg.org/ffmpeg-filters.html#Options-1
  - iw,ih - input width and input height
  - t - point of time of the video, in seconds
- filtering doesn't allow stream copy
- filter1=opt1=arg1:opt2=arg2,filter2=opt1=arg1
- filter1=arg1:arg2
- options
  - can have a shortform
  - separated by colon (:)

** _filter_complex

- for multiple inputs/outputs
- filtergraph
- each ~-i~ should be mapped into a "[N]" in the script

* snippets

- art filter effect #1 https://youtu.be/nobWeGycSe8?list=PLWuCzxqIpJs_68T4ABQGNPnOYpCJ1ln13&t=1244
- dropshadow https://stackoverflow.com/questions/70368647/how-to-use-ffmpeg-to-add-a-drop-shadow
- stream to twitch https://corvid.cafe/ffstream.html
- video stabilizer https://gist.github.com/maxogden/43219d6dcb9006042849

** from frames
- ffmpeg -i test-%09d.png foo.mp4
** to frames
- ffmpeg -i input.mp4 test-%09d.png
** to frames, one per second
- ffmpeg -i input.mp4 -r 1 test-%09d.png
** slice
- cut slices, naive -copy drops frames
  ffmpeg -ss 00:02:02 \
	-to 00:02:55 \
	-i "${IN}" \
	-y \
	-async 1 feels03.mp4
** slice
- get slice of video
  ffmpeg -ss 00:01:21 -to 00:01:24
** get duration (OLD)
- get duration in seconds
  ffmpeg -i file.flv 2>&1 | grep "Duration"| cut -d ' ' -f 4 | sed s/,// | sed 's@\..*@@g' | awk '{ split($1, A, ":"); split(A[3], B, "."); print 3600*A[1] + 60*A[2] + B[1] }'
  https://superuser.com/questions/650291/how-to-get-video-duration-in-seconds
** remove audio
- Remove all audio streams / tracks https://stackoverflow.com/questions/38161697/how-to-remove-one-track-from-video-file-using-ffmpeg
  ffmpeg -i input -map 0 -map -0:a -c copy output
** concat
- concat videos https://stackoverflow.com/questions/7333232/how-to-concatenate-two-mp4-files-using-ffmpeg
  ffmpeg -i opening.mkv -i episode.mkv -i ending.mkv
  -filter_complex "[0:v] [0:a] [1:v] [1:a] [2:v] [2:a] concat=n=3:v=1:a=1 [v] [a]"
  -map "[v]" -map "[a]" output.mkv
** join video/audio
- join video with audio
  ffmpeg -i video.mp4 -i audio.mp3 -c copy output.mp4
** join video/audio, missmatched
- https://stackoverflow.com/questions/5015771/merge-video-and-audio-with-ffmpeg-loop-the-video-while-audio-is-not-over
  - join short video - long audio
    $ ffmpeg  -stream_loop -1 -i input.mp4 -i input.mp3 -shortest -map 0:v:0 -map 1:a:0 -y out.mp4
  - join long audio - short video
    $ ffmpeg  -i input.mp4 -stream_loop -1 -i input.mp3 -shortest -map 0:v:0 -map 1:a:0 -y out.mp4
** to instagram

https://www.reddit.com/r/davinciresolve/comments/1bab2yp/instagram_uploads_are_always_terrible_any_ideas/

  - example
    - Profile: High
    - 720x720 (720x960????)
    - yuv420p
    - level: 31
    - fps: 30??
  - ffmpeg
    -i "final_export.mov"
    -vf "scale=-2:1920,format=yuv420p"
    -c:v libx264
    -profile:v main
    -level:v 4.0
    -pix_fmt yuv420p
    -movflags +faststart
    -r 30Q
    -c:a aac
    -b:a 192k "instagram_optimized_export.mp4"
* articles

- https://drewdevault.com/2022/10/12/In-praise-of-ffmpeg.html
- convolution https://igor.technology/interesting-things-you-can-do-with-ffmpeg/
- https://img.ly/blog/ultimate-guide-to-ffmpeg/
- https://tratt.net/laurie/blog/2021/automatic_video_editing.html
- https://www.gariany.com/2020/08/ffmpeg-step-by-step-retro-video-filter/
- https://blog.pkh.me/p/21-high-quality-gif-with-ffmpeg.html
- https://www.canva.dev/blog/engineering/a-journey-through-colour-space-with-ffmpeg/
- https://xeiaso.net/blog/video-compression/
* videos
- course: Video Art with FFMPEG https://www.youtube.com/playlist?list=PLWuCzxqIpJs_68T4ABQGNPnOYpCJ1ln13
