- wiki https://en.wikipedia.org/wiki/Firewalld
  - default on RedHat & Fedora & SUSE
  - ~D-Bus~ interface, uses polkit for authentication
  - external programs (eg NetworkManager) can switch between zones
  - Author: Eric Garver, Thomas Woerner


- Description
  - ipv4 and ipv6 simultanous
  - can load ~kernel modules~ along a /service/ in the form of a /helper/ to help keep track of dependencies
  - default config =/var/lib/firewalld= or =/usr/lib/firewalld=
  - system config =/etc/firewalld=
  - only tracking incoming packets, outgoing can be tracked with the *direct interface*
  - no DOS protection, rate limiting?
  - Direct Rules: (DEPRECATED)
    - to add your own ip*tables/ebtables rules in that syntax
  - ~Rich Rules~
    - source      (address)
    - destination (address)
    - one of:
      - service, port, protocol, icmp-block, icmp-type, masquerade, forward-port, source-port
    - log
    - audit
    - accept, reject, drop, mark
  - ~zones~
    - Similar to a complete firewall
    - 1 zone per connection/iface
    - A zone can be bound to several connections/iface
    - Made of:
      * services
      * ports (ranges) with protocols
      * rich rules
      * icmp blocks
      * masquerading
      * port/packet forwarding
      * default rule
  - ~services~
    - Made of:
      * port (range) with protocol
      * netfilter helper modules
      * destination address (range)


- home https://firewalld.org/
- man richlanguage https://firewalld.org/documentation/man-pages/firewalld.richlanguage.html
- source (Python) https://github.com/firewalld/firewalld
- documentation https://firewalld.org/documentation/

- gui firewall-config
- gui firewall-applet (QT)

* flags

|-------------------------------------------+----------------------------|
| --state                                   | running                    |
| --list-all                                | ZoneName ...               |
| --get-active-zones                        | ZoneName interfaces: wlan0 |
| --list-services                           | mdns sambda-client ssh     |
|-------------------------------------------+----------------------------|
| --permanent                               |                            |
| --add-masquerade                          |                            |
| --add-port=                               | 21-22/tcp                  |
| --add-interface=                          | eth0                       |
| --add-rule=                               |                            |
| --remove-service=                         | mdns                       |
|-------------------------------------------+----------------------------|
| --direct                                  | DEPRECATED                 |
| --direct --get-all-rules                  |                            |
|-------------------------------------------+----------------------------|
| --list-rich-rules                         |                            |
| --[addÂ¦remove]-rich-rule=                 |                            |
|-------------------------------------------+----------------------------|
| --reload                                  | -                          |
|-------------------------------------------+----------------------------|
| --get-ipsets                              |                            |
| --new-ipset=NAME --type=hash:net          |                            |
| --info-ipset=NAME                         |                            |
| --ipset=NAME --add-entry=IP               |                            |
| --ipset=NAME --add-entries-from-file=FILE |                            |
| --ipset=NAME --get-entries                |                            |
|-------------------------------------------+----------------------------|


* snippets

- https://github.com/EpicGames/UnrealEngine/blob/release/Engine/Build/BatchFiles/Linux/ContainerBuildThirdParty.sh

- ufw and firewalld rules to block VPS bots and scrapers
  https://blog.abctaylor.com/ufw-and-firewalld-rules-to-block-vps-bots-and-scrapers/

- FirewallD command line snippets for Linux
  https://gist.github.com/frengky/7e9fd7f161fe89e4b8a7

- --add-rich-rule="rule family='ipv4' source address='46.250.240.0/21' reject"
  --add-rich-rule="rule family='ipv6' masquerade"
  --direct --add-rule ipv4 filter OUTPUT 0 -p tcp -m tcp --dport=80 -j ACCEPT
  --direct --add-rule ipv4 filter OUTPUT 1 -j DROP

- block china https://forums.centos.org/viewtopic.php?f=57&t=76087&sid=5949477943817e5a9dba75ec67aa943e
  $ curl https://www.ipdeny.com/ipblocks/data/countries/cn.zone --output cn.zone # sorry China, it's not personal
  $ firewall-cmd --permanent --new-ipset=blocklist_v4 --type=hash:net --option=family=inet --option=hashsize=4096 --option=maxelem=200000
  $ firewall-cmd --permanent --ipset=blocklist_v4 --add-entries-from-file="cn.zone"
  $ firewall-cmd --permanent --zone=drop --add-source=ipset:blocklist_v4
  $ firewall-cmd --reload

- https://github.com/firewalld/firewalld/issues/696
  $ firewall-cmd --zone <zone> --add-rich-rule='rich icmp-type name="echo-request" accept'
   rich
   icmp-type name="echo-request"
   accept

* articles

- 23 https://www.computernetworkingnotes.com/linux-tutorials/firewalld-rich-rules-explained-with-examples.html
- 23 https://ejaaskel.dev/yocto-hardening-firewalls-part-1-nftables/
- 23 https://ejaaskel.dev/yocto-hardening-firewalls-part-2-firewalld/
- 22 https://major.io/p/build-tailscale-exit-node-firewalld/
- 21 https://firewalld.org/2021/06/the-upcoming-1-0-0
- 18 https://firewalld.org/2018/07/nftables-backend
- 18 https://opensource.com/article/18/9/linux-iptables-firewalld
- 15 http://geertj.me/2015/07/18/systemd-firewalld-tarsnap-ultimate-backup.html

- https://datacadamia.com/os/linux/firewalld/rich-rule
- https://www.golinuxcloud.com/firewalld-cheat-sheet/
- wiki fedora
  https://fedoraproject.org/wiki/Firewalld
  https://fedoraproject.org/wiki/Features/FirewalldRichLanguage
  https://docs.fedoraproject.org/en-US/quick-docs/firewalld/
- wiki arch https://wiki.archlinux.org/title/Firewalld
- wiki gentoo https://wiki.gentoo.org/wiki/Firewalld
- wiki rockylinux
  - https://docs.rockylinux.org/guides/security/firewalld-beginners/
  - https://docs.rockylinux.org/guides/security/firewalld/
- wiki rackspace https://docs.rackspace.com/docs/use-firewalld-on-redhat-based-distributions
- https://book.blueteamguides.com/hardening/firewalld
- wiki redhat
  - 7 https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/security_guide/sec-using_firewalls
  - 9 https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_firewalls_and_packet_filters/using-and-configuring-firewalld_firewall-packet-filters
    - Note that firewalld with nftables backend does NOT support
      passing custom nftables rules to firewalld, using the ~--direct~
      option.

* videos

** 21 video | blocking icmp traffic firewalld     | mrwhitep

https://www.youtube.com/watch?v=iaK6twfAJDk

- To block only allow ICMP for a specific IP
  $ firewall-cmd --permanent --direct --add-rule ipv4 filter INPUT 0 -p icmp -s 192.168.1.181/32 -j ACCEPT
  $ firewall-cmd --permanent --direct --add-rule ipv4 filter INPUT 0 -p icmp -s 0.0.0.0/0 -j DROP
  $ firewall-cmd --reload
  $ firewall-cmd --direct --get-all-rules

- --runtime-to-permanent does NOT work with --direct iptables
- rich-rule didn't worked for him, since icmp firewalld took precedence

** 19 video | Firewalld Changes Coming to Your OS | Eric Garver

- video: https://www.youtube.com/watch?v=yy87quTsdVw

- new features (0.7)

  - nftables
    - nftables does NOT assume complete control of firewalling
    - FirewallBackend=iptables

  - rich rule priorities
    - gives control of where they were be put, aka sorted
    - priority=0 for old behaviour
    - priority=32767 catch-all rule
    - rule priority=32767
      log prefix="UNEXPECTED: "
      limit value="5/m"
    - rule priority=-100 family="ipv4"
      source address="10.1.1.0/24"
      service name="ssh"
      accept
    - rule priority=-99
      service name="ssh"
      log
      reject

  - RFC3964 (6to4) ipv4 address filtering
  - ~--check-config~
  - FlushAllOnReload for direct rules

** 15 video | firewalld - present and future      | Thomas Woerner

- video: https://www.youtube.com/watch?v=L8rwSqONmCY
- slides: https://docplayer.net/2696979-Firewalld-thomas-woerner-red-hat-inc-nfws-2015-june-22.html

- Supports: iptables, ip6tables, ebtables (for bridges)
- new firewalld integrations: fail2ban
- ~firewall-offline-cmd~ to make changes when firewalld is NOT running

- Rich rules - examples
  - =Allow new ipv4/6 connections for ftp service and log 1 per minute using audit=
    rule
    service name="ftp"
    log
    limit value="1/m"
    audit
    accept
  - =Allot ipv4 connections from 192.168.0.0/24 for ftp service, log 1 per minute using syslog*=
    rule family="ipv4"
    source address="192.168.0.0/24"
    service name="tftp"
    log prefix="tftp" level="info"
    limit value="1/m"
    accept
  - =New ipv6 conenctions from 1:2:3:4:6:: to service radius are rejected and logged 3m. New ipv6 from other accepted.=
    rule family="ipv6"
    source address="1:2:3:4:6::"
    service name="radius"
    log prefix="radius" level="info"
    limit value="3/m"
    reject

    rule family="ipv6"
    service name="radius"
    accept

** 13 video | Dynamic firewall with firewalld     | Thomas Woerner

https://www.youtube.com/watch?v=XhwvT05Puhs

- created at RedHat
- due problems with ~system-config-firewall~ & ~lokkit~
  - it created a "static firewall"
  - sometimes loading/unloading kernel modules in the restarting
  - loss of connection due firewall due it
- default config =/var/lib/firewalld=
- system config =/etc/firewalld=
- two modes of configuration
  1) runtime
  2) persistent
- persistent zones/services are configured in XML
- ipv4 and ipv6 simultanous
- can load ~kernel modules~ along a /service/ in the form of a /helper/ to help keep track of dependencies
- D-BUS
  - uses policykit for authentication
  - also gives you "signals" to notify about changes
- 1(one) zone per connection/interface
- only tracking incoming packets, outgoing can be tracked with the *direct interface*
